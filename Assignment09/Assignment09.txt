1. What is the difference between subtyping and subclassing? Provide an example
   for your explanation.

   Subclassing is a way to reuse code of a superclass and make incremental
   modifications, e.g. overriding methods and adding more behaviour. See
   question 4 for an example.

   Subtyping is introducing a type that can be used in place of the supertype.
   The subtype does not necessarily have to be in a subclass relationship to
   the supertype, but it must guarantee that it can be used in place of the
   supertype, e.g. as method arguments to some function. Subtyping enforces
   substitutability.

   Example: If "A" is a subtype of "B", then it should be safe to provide an
   object of type A to this method:

       void doSomething(B whatever) {
         // ...
       }

   This statement does not necessarily hold if "A" is merely a subclass of "B".


2. Using the Java class-interface hierarchy given in Figure 1, explain what is
   the relationship between classes and interfaces.

   - X509ExtendedKeyManager is a subclass of Object
   - X509ExtendedKeyManager is a subtype of X509KeyManager
   - X509ExtendedKeyManager is a subtype of KeyManager
   - X509KeyManager is a subtype of KeyManager

3. Which forms of polymorphism are used in the Java code in Listing 1? Explain
   each of the forms.

       (1)    public class Bern<TT> {
       (2)        private TT var1;
       (3)        public void set(TT mh) { this.var1 = mh; }
       (4)        public TT get() { return var1; }
       (5)
       (6)        public static void main(String[] args) {
       (7)            int a = 3;
       (8)            float b = 2F;
       (9)            b = a;
      (10)            System.out.println(b);
      (11)            Bern<Integer> mj = new Bern();
      (12)            mj.set(12);
      (13)            System.out.println(mj.get());
      (14)        }
      (15)    }

   - The class Bern shows the use of parametric polymorphism. This is a good
     example for thinking of classes as being generators of types. Bern can be
     used to generate a more type specific class given a type as a parameter,
     e.g. (11).
   - The assignment on line (8) shows the use of coercion. Java will coerce the
     int referenced by "a" to a float in order to assign it to the variable "b"
     which has type float.
   - System.out.println on line (10) and (13) shows the use of overloaded
     methods. There is a println(float x) and a println(int x).

4. Use Java subclassing to better structure the code in Listing 2 and avoid
   code cloning.

       class Bicycle {
           private int frame_size;

           // the price of this bicycle
           public float price() { return 100 * 2; }

           // the sales tax on this bicycle
           public float salesTax() { return price() * .08; }
       }

       class RacingBicycle extends Bicycle {
           private int framesize;
           private int pieces_count;

           // price() and salesTax() are now inherited from Bicycle

           // returns the weight of this bicycle
           public void calculateWeight()
       }


5. In the code in q5.zip explain how covariant and contravariant are used in
   each code block. Why are there compile-time errors if you try to run the
   code?
