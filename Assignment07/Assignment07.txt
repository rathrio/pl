Exercise 1
==========

Abstract Syntax
---------------

We extend the Expr rule, so that it now knows about subtraction and division of
two expressions.

    Prog ::= 'ON' Stmt

    Stmt ::= Expr 'TOTAL' Stmt
           | Expr 'TOTAL' 'OFF'

    Expr ::= Expr1 '+' Expr2
           | Expr1 '-' Expr2
           | Expr1 '*' Expr2
           | Expr1 '/' Expr2
           | 'IF' Expr1 ',' Expr2 ',' Expr3
           | 'LASTANSWER'
           | '(' Expr ')'
           | Num

Introducing a new algebraic data type
-------------------------------------

Since we are now dealing with a program that may also result in Strings in
addition to Ints, we will introduce a new algebraic data type in our semantic
domain of functions and properly define the arithmetic functions.

The new data type "Result" provides two constructors: one for constructing a
String, e.g. "NOT A NUMBER", and one for ordinary Ints. Both typecheck to
Result.

Note that we perform Integer division. So no Floats possible.

    data Result = NaN String | Number Int

    plus, minus, times, divide :: Result -> Result -> Result

    plus (Number x) (Number y)   = Number (x + y)
    plus (NaN _) _               = NaN "NOT A NUMBER"
    plus _ (NaN _)               = NaN "NOT A NUMBER"

    minus (Number x) (Number y)  = Number (x - y)
    minus (NaN _) _              = NaN "NOT A NUMBER"
    minus _ (NaN _)              = NaN "NOT A NUMBER"

    times (Number x) (Number y)  = Number (x * y)
    times (NaN _) _              = NaN "NOT A NUMBER"
    times _ (NaN _)              = NaN "NOT A NUMBER"

    divide (Number _) (Number 0) = NaN "NOT A NUMBER"
    divide (Number x) (Number y) = Number (x `div` y)
    divide (NaN _) _             = NaN "NOT A NUMBER"
    divide _ (NaN _)             = NaN "NOT A NUMBER"

If you want to try these out in ghci, you'll have to provide some show
implementations, e.g.:

    instance Show Result where
        show (NaN s) = show s
        show (Number n) = show n

Program Semantics
-----------------

    P : Program → Result+

    P ⟦ ON S ⟧ = S ⟦ S ⟧ (Number 0)

Statement Semantics
-------------------

    S : ExprSequence → Result → Result+

    S ⟦ E TOTAL S ⟧ (r)   = let r' = E E ⟦ E ⟧ (r)
                            in cons(r', S ⟦ S ⟧ (r'))

    S ⟦ E TOTAL OFF ⟧ (r) = [ E ⟦ E ⟧ (r) ]

Expression Semantics
--------------------

Since we have exhaustively defined our arithmetic functions for the Result data
type, there's not much left to do here besides calling the appropriate
functions. Note that we're cheating a little here for the if condition
evaluation. One would have to properly define equality for Results as well.

    E : Expression → Result → Result

    E ⟦ E1 + E2 ⟧ (r)       = plus (E ⟦ E1 ⟧ (r)) (E ⟦ E2 ⟧ (r))

    E ⟦ E1 - E2 ⟧ (r)       = minus (E ⟦ E1 ⟧ (r)) (E ⟦ E2 ⟧ (r))

    E ⟦ E1 * E2 ⟧ (r)       = times (E ⟦ E1 ⟧ (r)) (E ⟦ E2 ⟧ (r))

    E ⟦ E1 / E2 ⟧ (r)       = divide (E ⟦ E1 ⟧ (r)) (E ⟦ E2 ⟧ (r))

    E ⟦ IF E1, E2, E3 ⟧ (r) = if E ⟦ E1 ⟧ (r) = Number 0
                              then E ⟦ E2 ⟧ (r)
                              else E ⟦ E3 ⟧ (r)

    E ⟦ LASTANSWER ⟧ (r)    = r
    E ⟦ (E) ⟧ (r)           = E ⟦ E ⟧ (r)
    E ⟦ N ⟧ (r)             = N


Exercise 2
==========

Abstract Syntax
---------------

    Number := Number Digit
            | Digit

    Digit  := '0'
            | '1'

Semantics
---------

Our semantic domain here is the domain of natural numbers (ℕ) where operators
such as addition (+) and multiplication (*) exist.

Note that the arguments to the semantic functions are AST node representations
of the numbers/digits and on the right side we have natural numbers. For
example in "D ⟦ 1 ⟧ = 1", the 1 in the D function argument is an AST node and
the 1 on the right hand side is the natural number 1.

    N : Number → ℕ
    N ⟦ N D ⟧ = N ⟦ N ⟧ * 2 + D ⟦ D ⟧
    N ⟦ D ⟧ = D ⟦ D ⟧

    D : Digit → ℕ
    D ⟦ D ⟧ = D

Testing
-------

    N ⟦ 1 ⟧
        = D ⟦ 1 ⟧
        = 1

    N ⟦ 0 ⟧
        = D ⟦ 0 ⟧
        = 0

    N ⟦ 111 ⟧
        = N ⟦ 11 ⟧ * 2 + D ⟦ 1 ⟧
        = N ⟦ 11 ⟧ * 2 + 1
        = (N ⟦ 1 ⟧ * 2 + D ⟦ 1 ⟧) * 2 + 1
        = (D ⟦ 1 ⟧ * 2 + 1) * 2 + 1
        = (1 * 2 + 1) * 2 + 1
        = 7

    N ⟦ 10101 ⟧
        = N ⟦ 1010 ⟧ * 2 + D ⟦ 1 ⟧
        = N ⟦ 1010 ⟧ * 2 + 1
        = (N ⟦ 101 ⟧ * 2 + D ⟦ 0 ⟧) * 2 + 1
        = ((N ⟦ 10 ⟧ * 2 + D ⟦ 1 ⟧) * 2 + 0) * 2 + 1
        = (((N ⟦ 1 ⟧ * 2 + D ⟦ 0 ⟧) * 2 + 1) * 2 + 0) * 2 + 1
        = (((1 * 2 + 0) * 2 + 1) * 2 + 0) * 2 + 1
        = 21
