Exercise 1
----------

factors :: Int -> [Int] is a monomorphic function. By examining the definition,
it takes one argument and returns a list, so its shape is "a -> [a]". Given the
type information of mod, we can refine the types of n and the values used in
the list comprehension to Ints. It's a monomorphic function, because it only
works with arguments of type Int.

isPerfect :: Int -> Bool is a monomorphic function. It's obvious that it takes
one argument and returns the result of a comparison, thus we can state "a ->
Bool". We have previously inferred that factors takes an argument of type Int,
therefore isPerfect's argument can be refined to an Int as well. It's a
monomorphic function, because it only works with arguments of type Int.

insert :: Int -> a -> [a] -> [a] is a polymorphic function. By examining the
second partial definition alone, we can infer that the function takes an Int, a
value of unknown type, and a list of said type and returns a list with the same
type, because Haskell lists are homogeneous. No further refinements can be
made, thus making this a polymorphic function. Both should work for example:

    insert 0 33 [1, 2, 3]
    insert 0 "s" ["c", "o", "r", "e"]


Exercise 2
----------

f1 :: (a -> a) -> a -> [a] is a polymorphic function.

    (1)  f1 f x
    (2)      | f x < 0 = []
    (3)      | otherwise = x : (f1 f (f x))

By examining the definitions, we see that f1 takes a function f, some other
value and returns a list:

    f1 :: (a -> b) -> c -> [d]

I'm not 100% sure in which order Hindley-Milner would apply the rules, but I
assume it builds an AST and infers bottom up. So it could work like listed
below.

By examining the function call "f (f x)" in (3), we can infer that f's argument
has the same type as f's return value and x (which in Hindley-Milner would be
multiple steps starting at examing the expression "x" -> "f x" -> ...):

    f1 :: (a -> a) -> a -> [b]

By examining "x : (f1 f (f x))" in (3), we can infer that the elements in the
list have the same type as x, since lists are homogeneous:

    f1 :: (a -> a) -> a -> [a]

By examining the comparison "f x < 0" in (2), we can infer that the return
value of f has to be an ordered, numerical type, i.e. "a" has to be part of
typeclass Ord and Num, but we cannot further refine it to a specific type.


Exercise 3
----------

See deleteRepetitions.hs



